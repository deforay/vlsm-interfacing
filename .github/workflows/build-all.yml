name: Build All Platforms

on:
  push:
    tags: ['v*']           # still supports tag pushes
  workflow_dispatch:        # and manual runs

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    name: Build Linux x64
    container:
      image: electronuserland/builder:latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: linux-electron-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Rebuild native deps
        run: npm run postinstall

      - name: Build application
        run: npm run build:prod

      - name: Build Linux package
        run: npx electron-builder --linux deb --x64 --publish never

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: release/*.deb
          if-no-files-found: error
          retention-days: 7

      - name: List build artifacts (non-blocking)
        if: always()
        shell: bash
        run: |
          echo "Runner OS: ${{ runner.os }}"
          [ -d release ] && ls -la release || echo "no release/ dir"
          ldd --version

  build-windows:
    runs-on: windows-latest
    name: Build Windows x64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: windows-electron-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Rebuild native deps
        run: npm run postinstall

      - name: Build application
        run: npm run build:prod

      - name: Build Windows package
        run: npx electron-builder --win portable nsis --x64 --publish never

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: release/*.exe
          if-no-files-found: error
          retention-days: 7

      - name: List build artifacts (non-blocking)
        if: always()
        shell: pwsh
        run: |
          "Runner OS: $env:RUNNER_OS"
          if (Test-Path release) { Get-ChildItem release } else { "no release/ dir" }

  release:
    name: Create GitHub Release with all assets
    needs:
      - build-linux
      - build-windows
    # run for tag pushes OR manual runs (even if a build leg failed)
    if: always() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Read version from package.json and set tag = v<version>
      - name: Derive release tag from package.json
        id: ver
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "pkg_version=$PKG_VERSION" >> "$GITHUB_OUTPUT"
          echo "RELEASE_TAG=v$PKG_VERSION" >> "$GITHUB_ENV"
          echo "Will release tag: v$PKG_VERSION"

      - id: dl-linux
        uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: dist/linux
        continue-on-error: true

      - id: dl-win
        uses: actions/download-artifact@v4
        with:
          name: windows-x64
          path: dist/windows
        continue-on-error: true

      - name: Show downloaded files
        run: |
          echo "Linux:" && ls -lh dist/linux || true
          echo "Windows:" && ls -lh dist/windows || true

      - name: Publish release v${{ steps.ver.outputs.pkg_version }}
        if: steps.dl-linux.outcome == 'success' || steps.dl-win.outcome == 'success'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}        # e.g. v3.1.5 from package.json
          name: ${{ env.RELEASE_TAG }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            dist/linux/*
            dist/windows/*
